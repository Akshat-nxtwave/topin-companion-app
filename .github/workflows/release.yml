name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      # --- Windows signing setup ---
      - name: Prepare Windows signing certificate
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          if ("${{ secrets.WINDOWS_CERT_PFX }}" -ne "") {
            Write-Host "Decoding certificate from GitHub Secret..."
            $pfxBytes = [System.Convert]::FromBase64String("${{ secrets.WINDOWS_CERT_PFX }}")
            [System.IO.File]::WriteAllBytes("windows-certificate.pfx", $pfxBytes)
            echo "CSC_LINK=$PWD\\windows-certificate.pfx" >> $env:GITHUB_ENV
            echo "CSC_KEY_PASSWORD=${{ secrets.WINDOWS_CERT_PASS }}" >> $env:GITHUB_ENV
          }
          else {  
            Write-Host "No secret provided, generating self-signed test certificate..."
            $cert = New-SelfSignedCertificate -Type CodeSigningCert -Subject "CN=TOPIN-Companion Test" -CertStoreLocation "Cert:\CurrentUser\My"
            $pwd = ConvertTo-SecureString -String "testpassword" -Force -AsPlainText
            Export-PfxCertificate -Cert $cert -FilePath "windows-certificate.pfx" -Password $pwd
            echo "CSC_LINK=$PWD\\windows-certificate.pfx" >> $env:GITHUB_ENV
            echo "CSC_KEY_PASSWORD=testpassword" >> $env:GITHUB_ENV
          }

          

      # Linux build
      - name: Build Linux app
        if: matrix.os == 'ubuntu-latest'
        run: yarn electron-builder --linux --publish=never

      # Windows build (signed automatically)
      - name: Build Windows app
        if: matrix.os == 'windows-latest'
        run: yarn electron-builder --windows --publish=never

      # --- macOS signing setup ---
      - name: Prepare macOS signing certificate
        if: matrix.os == 'macos-latest'
        run: echo "$MAC_CERT_P12" | base64 --decode > mac-certificate.p12
        shell: bash

      - name: Import macOS signing certificate
        if: matrix.os == 'macos-latest'
        run: |
          security create-keychain -p "abc" build.keychain
          security import mac-certificate.p12 -k build.keychain -P "$MAC_CERT_PASSWORD" -T /usr/bin/codesign -T /usr/bin/productsign
          security set-keychain-settings -lut 21600 build.keychain
          security list-keychains -s build.keychain
          security unlock-keychain -p "abc" build.keychain
        shell: bash


      # macOS build
      - name: Build macOS app
        if: matrix.os == 'macos-latest'
        run: yarn electron-builder --mac --publish=never
        env:
          CSC_LINK: mac-certificate.p12
          CSC_KEY_PASSWORD: ${{ secrets.MAC_CERT_PASSWORD }}

      # Upload artifacts
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-build
          path: dist/

  create-release:
    needs: release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/**/*.dmg
            dist/**/*.exe
            dist/**/*.AppImage
            dist/**/*.deb
            dist/**/*.zip
            dist/**/latest-mac.yml
            dist/**/latest-linux.yml
            dist/**/latest.yml
          draft: false
          prerelease: false
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: TOPIN-Companion
          path: dist/**
